# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

  post-build:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    outputs:
      build_status: ${{ steps.set_status.outputs.status }}
    steps:
      - name: Determine build status
        id: build_status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "::set-output name=status::success"
          elif [ "${{ needs.build.result }}" == "failure" ]; then
            echo "::set-output name=status::failure"
          else
            echo "::set-output name=status::cancelled"
          fi

  success_case:
    runs-on: ubuntu-latest
    needs: post-build
    if: ${{ needs.post-build.outputs.build_status == 'success' }}
    steps:
      - name: Get first commit timestamp
        id: get_first_commit
        run: |
          FIRST_COMMIT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits?sha=main&per_page=1" | jq -r ".[0].commit.committer.date")
          echo "FIRST_COMMIT_DATE=$FIRST_COMMIT" >> $GITHUB_ENV

      - name: Update the index
        run: |
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          PR_TITLE="${{ github.event.pull_request.title }}"
          BUILD_STATUS="${{ needs.post-build.outputs.build_status }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          
          FIRST_COMMIT_DATE=${{ env.FIRST_COMMIT_DATE }}
          TIME_DIFF=$(($(date -d "$CURRENT_DATE" +%s) - $(date -d "$FIRST_COMMIT_DATE" +%s)))
          echo "Time difference in hours: $TIME_DIFF"


          curl -X POST -H "Content-Type: application/json" \
          -d "{\"status\":\"$BUILD_STATUS\",\"lttc\":\"$TIME_DIFF\",\"timestamp\":\"$TIMESTAMP\",\"pr_title\":\"$PR_TITLE\",\"pr_url\":\"$PR_URL\"}" \
          https://b0tl7zsn-8443.inc1.devtunnels.ms/pipeline
  failure_case:
    runs-on: ubuntu-latest
    needs: post-build
    if: ${{ needs.post-build.outputs.build_status == 'failure' }}
    steps:         
      - name: Update index
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          PR_TITLE="${{ github.event.pull_request.title }}"
          BUILD_STATUS="${{ needs.post-build.outputs.build_status }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"status\":\"$BUILD_STATUS\",\"timestamp\":\"$TIMESTAMP\",\"pr_title\":\"$PR_TITLE\",\"pr_url\":\"$PR_URL\"}" \
          https://b0tl7zsn-8443.inc1.devtunnels.ms/pipeline

